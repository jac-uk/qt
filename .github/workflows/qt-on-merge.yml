name: QT. On merge

on:
  push:
    branches:
      - main
    paths:
      - 'qt/**'

jobs:

  deploy_to_develop:
    runs-on: ubuntu-latest
    environment:
      name: develop
    env:
      environment: develop
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - uses: actions/setup-node@master
        with:
          node-version: '20.10.0'
      - name: Installing project dependencies
        run: cd qt && echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc && npm ci

      # Check if the "develop-qt-app" hosting target is in firebase.json
      - name: Check if develop-qt-app is in firebase.json
        id: check_firebase_json
        run: |
          if grep -q 'develop-qt-app' firebase.json; then
            echo "Found develop-qt-app in firebase.json"
            echo "found_in_firebase_json=true" >> $GITHUB_ENV
          else
            echo "develop-qt-app NOT found in firebase.json"
            echo "found_in_firebase_json=false" >> $GITHUB_ENV
          fi

      # Check if the "develop-qt-app" target is in .firebaserc
      - name: Check if develop-qt-app is in .firebaserc
        id: check_firebaserc
        run: |
          if grep -q 'develop-qt-app' .firebaserc; then
            echo "Found develop-qt-app in .firebaserc"
            echo "found_in_firebaserc=true" >> $GITHUB_ENV
          else
            echo "develop-qt-app NOT found in .firebaserc"
            echo "found_in_firebaserc=false" >> $GITHUB_ENV
          fi

      # Log the boolean check results for both files
      - name: Log check results
        run: |
          echo "Is develop-qt-app in firebase.json? ${{ env.found_in_firebase_json }}"
          echo "Is develop-qt-app in .firebaserc? ${{ env.found_in_firebaserc }}"

      - name: Create env file
        run: |
          touch .env.${{ env.environment }}
          echo "VITE_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env.${{ env.environment }}
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env.${{ env.environment }}
          echo "VITE_FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }}" >> .env.${{ env.environment }}
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env.${{ env.environment }}
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.${{ env.environment }}
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env.${{ env.environment }}
          echo "VITE_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env.${{ env.environment }}
          echo "VITE_RECAPTCHA_TOKEN=${{ secrets.RECAPTCHA_TOKEN }}" >> .env.${{ env.environment }}
          cat .env.${{ env.environment }}
      - name: Building the project
        run: cd qt && npm run ${{ env.environment }}:build && cd ../
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
          target: '${{ env.environment }}-qt-app'
          channelId: live

      # Deploy with Debugging
      - name: Deploy to Firebase with Debugging
        run: |
          npx firebase-tools deploy --only hosting:${{ env.environment }}-qt-app --project "${{ secrets.FIREBASE_PROJECT_ID }}" --debug
