rules_version = '2';
service cloud.firestore {

  function userIsAuthenticated() {
    return request.auth.uid != null;
  }

  function currentUser() {
    return request.auth.uid;
  }

  function userIsJAC() {
    return request.auth.token.email.matches('(.*@judicialappointments|.*@justice)[.](digital|gov[.]uk)');
    // return request.auth.token.email_verified
    //   && request.auth.token.email.matches('(.*@judicialappointments|.*@justice)[.](digital|gov[.]uk)');
  }

  function userHasEmail(email) {
    return request.auth.token.email.lower() == email.lower();
    //return request.auth.token.email_verified
      //&& request.auth.token.email.lower() == email.lower();
  }

  function fieldHasValue(data, field, value) {
    return !(field in data) || data[field] == value;
  }

  match /databases/{database}/documents {

    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }

    match /folders/{folderId} {
      allow create: if userIsAuthenticated() && userIsJAC();
      allow read: if userIsAuthenticated() && userIsJAC();
      allow update: if userIsAuthenticated() && userIsJAC();
      allow delete: if userIsAuthenticated() && userIsJAC();
    }
    match /settings/services {
      allow read: if userIsAuthenticated() && userIsJAC();
      allow update: if userIsAuthenticated() && userIsJAC();
    }


    match /qualifyingTests/{qualifyingTestId} {
      allow create: if userIsAuthenticated() && userIsJAC();
      allow read: if userIsAuthenticated() && userIsJAC();
      allow update: if userIsAuthenticated() && userIsJAC();
      allow delete: if userIsAuthenticated() && userIsJAC();
    }

    match /qualifyingTestResponses/{qualifyingTestResponseId} {
      // allow admins read and update permission
      allow read: if userIsAuthenticated() && userIsJAC();
      allow update: if userIsAuthenticated() && userIsJAC();

      // allow candidate to read their own document
      allow read: if userIsAuthenticated()
        && fieldHasValue(resource.data.participant, 'email', request.auth.token.email);

      // allow candidates to update their own document
      // @TODO but only the responses field and only if within allowed duration from start time
      allow update: if fieldHasValue(resource.data.participant, 'email', request.auth.token.email);

    }

    match /.info/connected {
      allow read: if true;
    }
  }
}
