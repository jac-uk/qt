rules_version = '2';
service firebase.storage {
  function userIsAuthenticated() {
    return request.auth.uid != null;
  }
  function currentUser() {
    return request.auth.uid;
  }
  function userIsJAC() {
    return request.auth.token.email_verified
      && request.auth.token.email.matches('.*@judicialappointments[.](digital|gov[.]uk)')
  }
  function isValidFile() {
    return request.resource.size > 0
      && request.resource.size <= 2 * 1024 * 1024
      && request.resource.name.matches('.*\\.(pdf|docx|doc|odt|txt|fodt)');
  }
  match /b/{bucket}/o {
    match /exercise/{exerciseId}/{fileName} {
      allow read;
      allow write: if userIsAuthenticated() && userIsJAC() && isValidFile();
    }
    match /exercise/{exerciseId}/user/{userId}/{fileName} {
      allow read: if userIsAuthenticated() && userIsJAC();
      allow read: if userIsAuthenticated() && currentUser() == userId;
      allow write: if userIsAuthenticated() && currentUser() == userId && isValidFile();
      allow write: if userIsAuthenticated() && userIsJAC() && isValidFile();
    }
    match /exercise/{exerciseId}/application/{applicationId}/assessor/{userId}/{fileName} {
      allow read: if userIsAuthenticated() && userIsJAC();
      allow read: if userIsAuthenticated() && currentUser() == userId;
      allow write: if userIsAuthenticated() && currentUser() == userId && isValidFile();
    }
    match /exercise/{exerciseId}/application/{applicationId}/assessor/jac/{fileName} {
      allow read: if userIsAuthenticated() && userIsJAC();
      allow write: if userIsAuthenticated() && userIsJAC() && isValidFile();
    }
    match /exercise/{exerciseId}/application/{applicationId}/jac/{fileName} {
      allow read: if userIsAuthenticated() && userIsJAC();
      allow write: if userIsAuthenticated() && userIsJAC() && isValidFile();
    }
  }
}
